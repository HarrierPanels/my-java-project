pipeline {
    agent {
        label 'local1'
    }

    environment {
        AWS_CREDS = credentials('aws-creds')
    }

    stages {

        stage('Checkout') {
            steps {
                // Checkout your source code from your version control system
                checkout scm
            }
        }

        stage('Fetch Docker Hub Tags') {
            steps {
                script {
                    def repository = 'harrierpanels/myapp'
                    def url = "https://hub.docker.com/v2/repositories/${repository}/tags"
                    def response = sh(script: "curl -s ${url}", returnStdout: true)

                    if (response) {
                        def tags = new groovy.json.JsonSlurper().parseText(response).results.name
                        env.VERSION = input message: 'Select Version', parameters: [choice(choices: tags, description: 'Choose a version', name: 'VERSION')]
                    } else {
                        error("Failed to fetch Docker Hub tags")
                    }
                }
            }
        }

        stage('Select Environment') {
            steps {
                script {
                    env.ENVIRONMENT = input message: 'Select Environment', parameters: [choice(choices: 'dev\nqa', description: 'Choose an environment', name: 'ENVIRONMENT')]
                }
            }
        }

        stage('Deploy to Environment') {
            when {
                expression { env.ENVIRONMENT == 'dev' || env.ENVIRONMENT == 'qa' }
            }
            steps {
                script {
                    if (env.ENVIRONMENT == 'dev') {
                        echo "${env.VERSION} chosen for ${env.ENVIRONMENT}:"
                        sh "sed -i 's/harrierpanels\\/myapp:latest/harrierpanels\\/myapp:${env.VERSION}/g' dev-deployment-service.yaml"
                        sh "cat dev-deployment-service.yaml"
                    } else if (env.ENVIRONMENT == 'qa') {
                        echo "${env.VERSION} chosen for ${env.ENVIRONMENT}:"
                        sh "sed -i 's/harrierpanels\\/myapp:latest/harrierpanels\\/myapp:${env.VERSION}/g' qa-deployment-service.json"
                        sh "cat qa-deployment-service.json"
                        } else {
                            error "Failed to retrieve public IP address"
                        }
                    }
                }
            }
        }

        stage('Health Check') {
            when {
                expression { env.ENVIRONMENT == 'dev' || env.ENVIRONMENT == 'qa' }
            }
            steps {
                script {
                    def response = sh(script: "curl -s http://google.com", returnStdout: true)
                    if (response.contains('UP')) {
                        echo "Health check passed"
                    } else {
                        error "Health check failed"
                    }
                }
            }
        }

        stage('Send Notifications') {
            steps {
                script {
                    def message = "Deployment of myapp:${env.VERSION} to ${env.ENVIRONMENT} environment is complete"
                    echo "${message}"
                }
            }
        }
    }
}
