pipeline {
    agent {
        label 'aws2023'
    }

    environment {
        // AWS credentials
        AWS_CREDS = credentials('aws-creds')
    }

    stages {

        stage('Checkout') {
            steps {
                // Checkout your source code from your version control system
                checkout scm
            }
        }


        stage('Select Environment') {
            steps {
                script {
                    env.ENVIRONMENT = input message: 'Select Environment', parameters: [choice(choices: 'dev\nqa', description: 'Choose an environment', name: 'ENVIRONMENT')]
                }
            }
        }


        stage('Deploy to Environment') {
            when {
                expression { env.ENVIRONMENT == 'dev' || env.ENVIRONMENT == 'qa' }
            }
            steps {
                script {
                    if (env.ENVIRONMENT == 'dev') {
                        def lbExternalIp = sh(script: "ws ec2 describe-network-interfaces --filters Name=subnet-id,Values=subnet-0e41340a4d902effc Name=private-ip-address,Values=172.31.51.126 --query 'NetworkInterfaces[0].Association.PublicIp' --output text | tr -d '\\n'", returnStdout: true).trim()

                        env.PUB_IP = lbExternalIp
                    } else if (env.ENVIRONMENT == 'qa') {

                            // Get the public IP address
                          def pubIp = sh(script: "ws ec2 describe-network-interfaces --filters Name=subnet-id,Values=subnet-0e41340a4d902effc Name=private-ip-address,Values=172.31.51.126 --query 'NetworkInterfaces[0].Association.PublicIp' --output text | tr -d '\\n'", returnStdout: true).trim()

                          env.PUB_IP = pubIp
                   }
                }
            }
        }

        stage('Health Check') {
            when {
                expression { env.ENVIRONMENT == 'dev' || env.ENVIRONMENT == 'qa' }
            }
            steps {
                script {
                    def startTime = currentBuild.startTimeInMillis
                    def timeout = 5 * 60 * 1000 // 5 minutes in milliseconds
                    def response = ''
                    while (!(response.contains('Harrier') || response.contains('Maven'))) {
                        if (currentBuild.duration > timeout) {
                            error "Health check timed out after ${timeout / 1000 / 60} minutes"
                        }
                        response = sh(script: "curl -s http://${env.PUB_IP}", returnStdout: true)
                        sleep 10 // wait 10 seconds before trying again
                    }
                    echo "Health check passed"
                }
            }
        }

        stage('Send Notifications') {
            steps {
                script {
                    def message = "Deployment of myapp:${env.VERSION} to ${env.ENVIRONMENT} environment is complete"
                    echo "${message}"
                }
            }
        }
    }
}
