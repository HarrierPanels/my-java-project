pipeline {
    agent {
        label 'aws2023'
    }

    environment {
        // AWS credentials
        AWS_CREDS = credentials('aws-creds')
    }

    stages {

        stage('Checkout') {
            steps {
                // Checkout your source code from your version control system
                checkout scm
            }
        }

        stage('Fetch Docker Hub Tags') {
            steps {
                script {
                    // Define Docker Hub variables
                    def repository = 'harrierpanels/myapp'
                    def url = "https://hub.docker.com/v2/repositories/${repository}/tags"
                    def response = sh(script: "curl -s ${url}", returnStdout: true)

                    if (response) {
                        def tags = new groovy.json.JsonSlurper().parseText(response).results.name
                        env.VERSION = input message: 'Select Version', parameters: [choice(choices: tags, description: 'Choose a version', name: 'VERSION')]
                    } else {
                        error("Failed to fetch Docker Hub tags")
                    }
                }
            }
        }

        stage('Select Environment') {
            steps {
                script {
                    env.ENVIRONMENT = input message: 'Select Environment', parameters: [choice(choices: 'dev\nqa', description: 'Choose an environment', name: 'ENVIRONMENT')]
                }
            }
        }
        stage('Deploy to Environment') {
            when {
                expression { env.ENVIRONMENT == 'dev' || env.ENVIRONMENT == 'qa' }
            }
            steps {
                script {
                    if (env.ENVIRONMENT == 'dev') {
                        echo "${env.VERSION} chosen for ${env.ENVIRONMENT}:"
                        sh "aws eks update-kubeconfig --region us-east-1 --name dev-cluster"
                        sh "sed -i 's/harrierpanels\\/myapp:latest/harrierpanels\\/myapp:${env.VERSION}/g' dev-deployment-service.yaml"
                        sh "kubectl apply -f dev-deployment-service.yaml"

                        // Wait for the LoadBalancer to be assigned an external IP
                        echo "Waiting for the LoadBalancer to be assigned an external IP..."
                        def lbExternalIp = ''
                        timeout(time: 15, unit: 'MINUTES') {
                            // Wait for the LoadBalancer to have an external IP
                            def lbStatus = ''
                            while (lbStatus != 'active' || lbExternalIp.isEmpty()) {
                                lbStatus = sh(script: "aws elbv2 describe-load-balancers --names dev-service -q 'LoadBalancers[0].State.Code' --output text", returnStatus: true, returnStdout: true).trim()
                                if (lbStatus == 'active') {
                                    lbExternalIp = sh(script: "aws elbv2 describe-load-balancers --names dev-service --query 'LoadBalancers[0].DNSName' --output text", returnStatus: true, returnStdout: true).trim()
                                } else {
                                    sleep 30  // Sleep for 30 seconds and then check again
                                }
                            }
                        }
                        if (!lbExternalIp.isEmpty()) {
                            env.PUB_IP = lbExternalIp
                        } else {
                            error "Failed to retrieve public IP address"
                        }
                    } else if (env.ENVIRONMENT == 'qa') {
                        echo "${env.VERSION} chosen for ${env.ENVIRONMENT}:"
                        sh "sed -i 's/harrierpanels\\/myapp:latest/harrierpanels\\/myapp:${env.VERSION}/g' qa-deployment-service.json"

                        def sg = sh(script: 'aws ec2 describe-security-groups --filters "Name=group-name,Values=Secjen" --query "SecurityGroups[0].GroupId" --output text', returnStdout: true).trim()
                        def subnet = sh(script: 'aws ec2 describe-subnets --filters "Name=vpc-id,Values=$(aws ec2 describe-vpcs --filters "Name=isDefault,Values=true" --query "Vpcs[0].VpcId" --output text)" --query "Subnets[0].SubnetId" --output text', returnStdout: true).trim()

                        sh "aws ecs create-service --cluster qa-cluster --service-name qa-service --task-definition qa-fargate --desired-count 1 --launch-type 'FARGATE' --network-configuration 'awsvpcConfiguration={subnets=[${subnet}],securityGroups=[${sg}],assignPublicIp=ENABLED}'"
                        def response = sh(script: "aws ecs describe-services --cluster qa-cluster --services qa-service --query 'services[0].networkConfiguration.awsvpcConfiguration.assignPublicIp'", returnStdout: true)
                        if (response.contains('true')) {
                            // Get the subnet ID
                            def subnetId = sh(script: "aws ecs describe-services --cluster qa-cluster --services qa-service --query 'services[0].networkConfiguration.awsvpcConfiguration.subnets[0]' --output text", returnStdout: true).trim()
                    
                            // Get the private IP address
                            def privateIp = sh(script: "aws ecs describe-tasks --cluster qa-cluster --tasks $(aws ecs list-tasks --cluster qa-cluster --service-name qa-service --query 'taskArns[0]' --output text) --query 'tasks[0].attachments[0].details[?name==\\\"privateIPv4Address\\\"].value' --output text", returnStdout: true).trim()

                            // Get the public IP address
                            def pubIp = sh(script: "aws ec2 describe-network-interfaces --filters Name=subnet-id,Values=${subnetId} Name=private-ip-address,Values=${privateIp} --query 'NetworkInterfaces[0].Association.PublicIp' --output text", returnStdout: true).trim()

                            env.PUB_IP = pubIp
                        } else {
                            error "Failed to retrieve public IP address"
                        }
                    }
            }
        }

        stage('Health Check') {
            when {
                expression { env.ENVIRONMENT == 'dev' || env.ENVIRONMENT == 'qa' }
            }
            steps {
                script {
                    def startTime = currentBuild.startTimeInMillis
                    def timeout = 5 * 60 * 1000 // 5 minutes in milliseconds
                    def response = ''
                    while (!response.contains('Harrier')) {
                        if (currentBuild.duration > timeout) {
                            error "Health check timed out after ${timeout / 1000 / 60} minutes"
                        }
                        response = sh(script: "curl -s http://${env.PUB_IP}", returnStdout: true)
                        sleep 10 // wait 10 seconds before trying again
                    }
                    echo "Health check passed"
                }
            }
        }

        stage('Send Notifications') {
            steps {
                script {
                    def message = "Deployment of myapp:${env.VERSION} to ${env.ENVIRONMENT} environment is complete"
                    echo "${message}"
                }
            }
        }
    }
}
